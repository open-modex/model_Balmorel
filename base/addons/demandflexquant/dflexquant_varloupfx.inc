* File dflexquant_varloupfx.inc for the Balmorel model.
* For use with addon dflexquant
* Latest revision 20171213(hr)

* Elastic demand quantities, upper bounds on the quantities of the individual steps.

* Using help parameters IDE_T_DFLEXQUANT and IDH_T_DFLEXQUANT representing nominal demand   TODO: maybe I will reintroduce them in BB4 for printing, addons, and possibly other, but not in main code 

IDE_T_DFLEXQUANT(IY411,IR,DEUSER,S,T) = ((DE(IY411,IR,DEUSER) * DE_VAR_T(IR,DEUSER,S,T)) / IDE_SUMST(IR,DEUSER))$(IDE_SUMST(IR,DEUSER) GT 0);
IDH_T_DFLEXQUANT(IY411,IA,DHUSER,S,T) = ((DH(IY411,IA,DHUSER) * DH_VAR_T(IA,DHUSER,S,T)) / IDH_SUMST(IA,DHUSER))$(IDH_SUMST(IA,DHUSER) GT 0);

* To ensure that needed data is provided check as follows, abort in case of error
LOOP((IR,DEUSER,S,T),
  ISCALAR1 = 0;
  LOOP(DEF_D1$(NOT DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D1)), ISCALAR1 = 1;);
  ABORT$ISCALAR1 "Error in addon dflexquant: DEF_STEPS lacking data for some elements in DEF_D1. File %system.incname%";
  ISCALAR1 = 0;
  LOOP(DEF_U1$(NOT DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_U1)), ISCALAR1 = 1;);
  ABORT$ISCALAR1 "Error in addon dflexquant: DEF_STEPS lacking data for some elements in DEF_U1. File %system.incname%";
);
LOOP((IA,DHUSER,S,T),
  ISCALAR1 = 0;
  LOOP(DHF_D1$(NOT DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_D1)), ISCALAR1 = 1;);
  ABORT$ISCALAR1 "Error in addon dflexquant: DHF_STEPS lacking data for some elements in DHF_D1. File %system.incname%";
  ISCALAR1 = 0;
  LOOP(DHF_U1$(NOT DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_U1)), ISCALAR1 = 1;);
  ABORT$ISCALAR1 "Error in addon dflexquant: DHF_STEPS lacking data for some elements in DHF_U1. File %system.incname%";
);
* The above check was on quantities DF_QUANT only. Similar check could be made on prices.

VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_D1)$(ORD(DEF_D1) LT CARD(DEF_D1)) = IDE_T_DFLEXQUANT(IY411,IR,DEUSER,S,T) * (DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D1+1)-DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D1));
VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_D1)$((ORD(DEF_D1) EQ CARD(DEF_D1)) AND (1 LT CARD(DEF_D1))) = IDE_T_DFLEXQUANT(IY411,IR,DEUSER,S,T) * (1-DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D1));
VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_U1)$((ORD(DEF_U1) EQ 1) AND (1 LT CARD(DEF_U1))) = IDE_T_DFLEXQUANT(IY411,IR,DEUSER,S,T) * (DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_U1)-1);
VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_U1)$(1 LT ORD(DEF_U1)) = IDE_T_DFLEXQUANT(IY411,IR,DEUSER,S,T) * (DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_U1)-DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_U1-1));
VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_D2)$(ord(def_d2) eq card(def_d2)) = DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D2);
VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_D2)$(ord(def_d2) lt card(def_d2)) = DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D2)- DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D2+1);
VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_U2) = DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_U2);

VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_U3) = IDE_T_DFLEXQUANT(IY411,IR,DEUSER,S,T)*DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_U3);
VDEF_T.UP(IY411,IR,DEUSER,S,T,DEF_D3) = IDE_T_DFLEXQUANT(IY411,IR,DEUSER,S,T)*DEF_STEPS(IR,DEUSER,S,T,'DF_QUANT',DEF_D3);

VDHF_T.UP(IY411,IA,DHUSER,S,T,DHF_D1)$(ORD(DHF_D1) EQ 1) = INF;
VDHF_T.UP(IY411,IA,DHUSER,S,T,DHF_D1)$((1 LT ORD(DHF_D1)) AND (ORD(DHF_D1) LT CARD(DHF_D1))) = IDH_T_DFLEXQUANT(IY411,IA,DHUSER,S,T) * (DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_D1+1)-DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_D1));
VDHF_T.UP(IY411,IA,DHUSER,S,T,DHF_D1)$((ORD(DHF_D1) EQ CARD(DHF_D1)) AND (1 LT CARD(DHF_D1)))= IDH_T_DFLEXQUANT(IY411,IA,DHUSER,S,T)  *(1-DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_D1));
VDHF_T.UP(IY411,IA,DHUSER,S,T,DHF_U1)$((ORD(DHF_U1) EQ 1) AND (1 LT CARD(DHF_D1))) = IDH_T_DFLEXQUANT(IY411,IA,DHUSER,S,T) * (DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_U1)-1);
VDHF_T.UP(IY411,IA,DHUSER,S,T,DHF_U1)$((1 LT ORD(DHF_U1)) AND (ORD(DHF_U1) LT CARD(DHF_U1))) = IDH_T_DFLEXQUANT(IY411,IA,DHUSER,S,T) * (DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_U1)-DHF_STEPS(IA,DHUSER,S,T,'DF_QUANT',DHF_U1-1));
VDHF_T.UP(IY411,IA,DHUSER,S,T,DHF_U1)$(ORD(DHF_U1) EQ CARD(DHF_U1))= INF;


* Clear IDE_T and IDH_T from memory, as they are not to be used any more.
Option kill=IDE_T_DFLEXQUANT, kill=IDH_T_DFLEXQUANT;

